# Einsatz√ºberwachung Mobile - Automatische Problem-Behebung
# PowerShell Script f√ºr Server-Start-Probleme
# Version 1.6 - Erweiterte Diagnose und Reparatur

param(
    [switch]$DiagnoseOnly = $false,
    [switch]$Force = $false,
    [int]$Port = 8080
)

Write-Host "üîß EINSATZ√úBERWACHUNG MOBILE - AUTOMATISCHE REPARATUR v1.6" -ForegroundColor Cyan
Write-Host "=============================================================" -ForegroundColor Cyan
Write-Host ""

# Pr√ºfe Administrator-Rechte
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")

if (-not $isAdmin) {
    Write-Host "‚ùå ADMINISTRATOR-RECHTE ERFORDERLICH" -ForegroundColor Red
    Write-Host ""
    Write-Host "üí° L√ñSUNG:" -ForegroundColor Yellow
    Write-Host "1. PowerShell als Administrator √∂ffnen:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Windows-Taste + X" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ 'Windows PowerShell (Administrator)' w√§hlen" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ UAC-Dialog mit 'Ja' best√§tigen" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "2. Script erneut ausf√ºhren:" -ForegroundColor Yellow
    Write-Host "   .\Fix-MobileServer.ps1" -ForegroundColor Yellow
    Write-Host ""
    Read-Host "Dr√ºcken Sie Enter zum Beenden"
    exit 1
}

Write-Host "‚úÖ Administrator-Rechte verf√ºgbar" -ForegroundColor Green
Write-Host ""

# Funktion: Port-Check und Reparatur
function Test-AndFixPort {
    param([int]$PortNumber)
    
    Write-Host "üîå PR√úFE PORT $PortNumber..." -ForegroundColor Yellow
    
    try {
        $connections = Get-NetTCPConnection -LocalPort $PortNumber -ErrorAction SilentlyContinue
        
        if ($connections) {
            Write-Host "‚ö†Ô∏è  Port $PortNumber wird verwendet von:" -ForegroundColor Red
            
            foreach ($conn in $connections) {
                try {
                    $process = Get-Process -Id $conn.OwningProcess -ErrorAction SilentlyContinue
                    if ($process) {
                        Write-Host "   ‚Ä¢ $($process.ProcessName) (PID: $($process.Id))" -ForegroundColor Red
                        
                        # Wenn es eine alte Einsatz√ºberwachung-Instanz ist, beenden
                        if ($process.ProcessName -like "*Einsatz*" -or $process.ProcessName -like "*Mobile*") {
                            if ($Force -or (Read-Host "   Soll dieser Prozess beendet werden? (j/n)") -eq 'j') {
                                Write-Host "   üîÑ Beende Prozess..." -ForegroundColor Yellow
                                Stop-Process -Id $process.Id -Force
                                Start-Sleep -Seconds 2
                                Write-Host "   ‚úÖ Prozess beendet" -ForegroundColor Green
                            }
                        }
                    }
                } catch {
                    Write-Host "   ‚Ä¢ Unbekannter Prozess (PID: $($conn.OwningProcess))" -ForegroundColor Red
                }
            }
        } else {
            Write-Host "‚úÖ Port $PortNumber ist verf√ºgbar" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è  Port-Check Fehler: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host ""
}

# Funktion: URL-Reservierung reparieren
function Repair-UrlReservation {
    param([int]$PortNumber)
    
    Write-Host "üîó REPARIERE URL-RESERVIERUNG..." -ForegroundColor Yellow
    
    # Pr√ºfe bestehende Reservierungen
    $existing = netsh http show urlacl | Select-String ":$PortNumber/"
    
    if ($existing) {
        Write-Host "‚ÑπÔ∏è  Bestehende Reservierung gefunden:" -ForegroundColor Blue
        Write-Host "$existing" -ForegroundColor Blue
        
        if ($Force -or (Read-Host "Soll die bestehende Reservierung erneuert werden? (j/n)") -eq 'j') {
            Write-Host "üîÑ Entferne alte Reservierung..." -ForegroundColor Yellow
            netsh http delete urlacl url="http://+:$PortNumber/" | Out-Null
        }
    }
    
    # Neue Reservierung hinzuf√ºgen
    Write-Host "üîÑ F√ºge neue URL-Reservierung hinzu..." -ForegroundColor Yellow
    $result = netsh http add urlacl url="http://+:$PortNumber/" user=Everyone
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ URL-Reservierung erfolgreich hinzugef√ºgt" -ForegroundColor Green
    } else {
        Write-Host "‚ùå URL-Reservierung fehlgeschlagen:" -ForegroundColor Red
        Write-Host "$result" -ForegroundColor Red
    }
    
    Write-Host ""
}

# Funktion: Firewall-Regel reparieren
function Repair-FirewallRule {
    param([int]$PortNumber)
    
    Write-Host "üõ°Ô∏è  REPARIERE FIREWALL-REGEL..." -ForegroundColor Yellow
    
    $ruleName = "Einsatzueberwachung_Mobile"
    
    # Pr√ºfe bestehende Regel
    $existing = netsh advfirewall firewall show rule name="$ruleName" 2>$null
    
    if ($existing -match "No rules match") {
        Write-Host "‚ÑπÔ∏è  Keine bestehende Firewall-Regel gefunden" -ForegroundColor Blue
    } else {
        Write-Host "‚ÑπÔ∏è  Bestehende Firewall-Regel gefunden" -ForegroundColor Blue
        
        if ($Force -or (Read-Host "Soll die Regel erneuert werden? (j/n)") -eq 'j') {
            Write-Host "üîÑ Entferne alte Regel..." -ForegroundColor Yellow
            netsh advfirewall firewall delete rule name="$ruleName" | Out-Null
        }
    }
    
    # Neue Regel hinzuf√ºgen
    Write-Host "üîÑ F√ºge neue Firewall-Regel hinzu..." -ForegroundColor Yellow
    $result = netsh advfirewall firewall add rule name="$ruleName" dir=in action=allow protocol=TCP localport=$PortNumber
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Firewall-Regel erfolgreich hinzugef√ºgt" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Firewall-Regel fehlgeschlagen:" -ForegroundColor Red
        Write-Host "$result" -ForegroundColor Red
    }
    
    Write-Host ""
}

# Funktion: System-Diagnose
function Invoke-SystemDiagnosis {
    Write-Host "üîç SYSTEM-DIAGNOSE..." -ForegroundColor Yellow
    Write-Host ""
    
    # Windows-Version
    $osInfo = Get-WmiObject -Class Win32_OperatingSystem
    Write-Host "üñ•Ô∏è  Windows: $($osInfo.Caption) (Build $($osInfo.BuildNumber))" -ForegroundColor Blue
    
    # .NET Versionen
    Write-Host "üíª .NET Versionen:" -ForegroundColor Blue
    try {
        $dotnetVersions = dotnet --list-runtimes 2>$null | Where-Object { $_ -like "*Microsoft.WindowsDesktop.App*" }
        if ($dotnetVersions) {
            foreach ($version in $dotnetVersions) {
                Write-Host "   ‚Ä¢ $version" -ForegroundColor Blue
            }
        } else {
            Write-Host "   ‚ö†Ô∏è  .NET Desktop Runtime nicht gefunden" -ForegroundColor Red
        }
    } catch {
        Write-Host "   ‚ö†Ô∏è  .NET-Informationen nicht verf√ºgbar" -ForegroundColor Red
    }
    
    # Netzwerk-Interfaces
    Write-Host "üåê Aktive Netzwerk-Interfaces:" -ForegroundColor Blue
    $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
    foreach ($adapter in $networkAdapters) {
        $ipConfig = Get-NetIPAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4 -ErrorAction SilentlyContinue
        if ($ipConfig) {
            Write-Host "   ‚Ä¢ $($adapter.Name): $($ipConfig.IPAddress)" -ForegroundColor Blue
        }
    }
    
    # Firewall-Status
    Write-Host "üõ°Ô∏è  Firewall-Status:" -ForegroundColor Blue
    $firewallProfiles = netsh advfirewall show allprofiles state
    if ($firewallProfiles -match "State\s+OFF") {
        Write-Host "   ‚úÖ Firewall ist deaktiviert (keine Blockierung)" -ForegroundColor Green
    } elseif ($firewallProfiles -match "State\s+ON") {
        Write-Host "   ‚ö†Ô∏è  Firewall ist aktiv (Port-Freigabe erforderlich)" -ForegroundColor Yellow
    } else {
        Write-Host "   ‚ùì Firewall-Status unbekannt" -ForegroundColor Red
    }
    
    Write-Host ""
}

# Funktion: Vollst√§ndige Reparatur
function Invoke-FullRepair {
    param([int]$PortNumber)
    
    Write-Host "üîß STARTE VOLLST√ÑNDIGE REPARATUR..." -ForegroundColor Cyan
    Write-Host ""
    
    # 1. System-Diagnose
    Invoke-SystemDiagnosis
    
    # 2. Port pr√ºfen und reparieren
    Test-AndFixPort -PortNumber $PortNumber
    
    # 3. URL-Reservierung reparieren
    Repair-UrlReservation -PortNumber $PortNumber
    
    # 4. Firewall-Regel reparieren
    Repair-FirewallRule -PortNumber $PortNumber
    
    # 5. Abschlusspr√ºfung
    Write-Host "‚úÖ REPARATUR ABGESCHLOSSEN" -ForegroundColor Green
    Write-Host ""
    Write-Host "üéØ N√ÑCHSTE SCHRITTE:" -ForegroundColor Cyan
    Write-Host "1. Einsatz√ºberwachung als Administrator starten" -ForegroundColor Yellow
    Write-Host "2. Mobile Verbindung √∂ffnen" -ForegroundColor Yellow
    Write-Host "3. 'Server starten' klicken" -ForegroundColor Yellow
    Write-Host "4. QR-Code mit iPhone scannen" -ForegroundColor Yellow
    Write-Host ""
}

# Hauptprogramm
if ($DiagnoseOnly) {
    Write-Host "üîç NUR DIAGNOSE-MODUS" -ForegroundColor Cyan
    Write-Host ""
    Invoke-SystemDiagnosis
    Test-AndFixPort -PortNumber $Port
} else {
    if ($Force) {
        Write-Host "‚ö° AUTOMATISCHER REPARATUR-MODUS (Ohne Nachfragen)" -ForegroundColor Cyan
        Write-Host ""
    } else {
        Write-Host "üîß INTERAKTIVER REPARATUR-MODUS" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "üí° Dieses Script behebt automatisch h√§ufige Server-Start-Probleme:" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ Port-Konflikte" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ URL-Reservierungen" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ Firewall-Regeln" -ForegroundColor Yellow
        Write-Host ""
        
        if ((Read-Host "M√∂chten Sie fortfahren? (j/n)") -ne 'j') {
            Write-Host "Reparatur abgebrochen." -ForegroundColor Red
            exit 0
        }
        Write-Host ""
    }
    
    Invoke-FullRepair -PortNumber $Port
}

Write-Host "üì± MOBILE SERVER REPARATUR ABGESCHLOSSEN" -ForegroundColor Cyan
Write-Host ""
Read-Host "Dr√ºcken Sie Enter zum Beenden"
