name: Release

on:
  workflow_dispatch: # Ermöglicht manuellen Start im "Actions"-Tab auf GitHub
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.7.1

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore Einsatzueberwachung.csproj

    - name: Build application
      run: dotnet build Einsatzueberwachung.csproj --configuration Release --no-restore

    - name: List directory structure (Debug)
      run: |
        Write-Host "=== Root Directory ==="
        Get-ChildItem -Path . -Recurse -Depth 2 | Select-Object FullName
        Write-Host "`n=== Checking bin/Release folder ==="
        if (Test-Path "bin\Release\net8.0-windows") {
          Write-Host "✓ bin\Release\net8.0-windows exists"
          Get-ChildItem "bin\Release\net8.0-windows" | Select-Object Name
        } else {
          Write-Host "✗ bin\Release\net8.0-windows NOT FOUND"
        }

    - name: Download and Install Inno Setup 6.2.2
      run: |
        $InnoSetupUrl = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $InstallerPath = "$env:TEMP\innosetup-6.2.2.exe"
        Write-Host "Downloading Inno Setup 6.2.2..."
        Invoke-WebRequest -Uri $InnoSetupUrl -OutFile $InstallerPath
        Write-Host "Installing Inno Setup..."
        Start-Process -FilePath $InstallerPath -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/SP-" -Wait
        Write-Host "Inno Setup installed successfully"

    - name: Patch Inno Setup Script
      run: |
        $scriptPath = "Setup\Einsatzueberwachung_Setup.iss"
        Write-Host "Patching Inno Setup script to remove problematic references..."
        $content = Get-Content $scriptPath
        
        # Entferne problematische Datei-Referenzen
        $content = $content | Where-Object { 
          $_ -notmatch "^LicenseFile=" -and 
          $_ -notmatch "^InfoBeforeFile=" -and 
          $_ -notmatch "^InfoAfterFile=" 
        }
        
        # Entferne ungültige Flags aus Tasks
        $content = $content -replace '; Flags: checked', ''
        $content = $content -replace 'Flags: checked', ''
        
        $content | Set-Content $scriptPath -Encoding UTF8
        Write-Host "Script patched successfully"
        Write-Host "`nPatched content preview:"
        Get-Content $scriptPath | Select-Object -First 60

    - name: Compile Inno Setup Script
      run: |
        $IsccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        if (-not (Test-Path $IsccPath)) {
          Write-Host "Error: ISCC.exe not found at $IsccPath"
          exit 1
        }
        Write-Host "Compiling Inno Setup script..."
        & $IsccPath "Setup\Einsatzueberwachung_Setup.iss"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Inno Setup compilation failed with exit code $LASTEXITCODE"
          exit 1
        }
        Write-Host "Compilation successful"

    - name: Get installer path
      id: get_installer_path
      run: |
        $installer = Get-ChildItem -Path "Setup/Output" -Filter "*.exe" | Select-Object -First 1
        echo "path=$($installer.FullName)" >> $env:GITHUB_OUTPUT
        echo "name=$($installer.Name)" >> $env:GITHUB_OUTPUT

    - name: Create update-info.json
      id: create_update_info
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        $installerPath = "${{ steps.get_installer_path.outputs.path }}"
        $setupFile = Get-Item $installerPath
        $fileSize = $setupFile.Length
        $releaseDate = Get-Date -Format "yyyy-MM-dd"
        $repoUrl = "https://github.com/${{ github.repository }}"
        $installerName = "${{ steps.get_installer_path.outputs.name }}"

        $updateInfo = @{
            version = $version
            releaseDate = $releaseDate
            downloadUrl = "$repoUrl/releases/download/${{ github.ref_name }}/$installerName"
            releaseNotesUrl = "$repoUrl/releases/tag/${{ github.ref_name }}"
            mandatory = $false
            minimumVersion = "1.6.0"
            fileSize = $fileSize
            releaseNotes = @(
                "🚀 Neue Version $version verfügbar",
                "🔧 Diverse Bugfixes und Performance-Optimierungen",
                "🛡️ Sicherheits-Updates"
            )
        } | ConvertTo-Json -Depth 5

        $updateInfo | Out-File -FilePath "update-info.json" -Encoding UTF8
        echo "path=update-info.json" >> $env:GITHUB_OUTPUT
        Write-Host "update-info.json created successfully"

    - name: Create Release and Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $tagName = if ($env:GITHUB_REF -match 'refs/tags/(.*)') { $matches[1] } else { "v1.7.1" }
        $installerPath = "${{ steps.get_installer_path.outputs.path }}"
        $installerName = "${{ steps.get_installer_path.outputs.name }}"
        
        Write-Host "Creating release for tag: $tagName"
        Write-Host "Installer path: $installerPath"
        
        gh release create $tagName `
          --title "Release $tagName" `
          --notes "New release of Einsatzueberwachung Professional v$tagName" `
          $installerPath `
          "update-info.json"
        
        Write-Host "Release created successfully with installer and update-info.json"
