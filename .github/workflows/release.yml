# GitHub Actions Workflow für automatische Releases
# Erstellt automatisch Setup.exe und veröffentlicht Updates über GitHub Releases

name: Create Release with Setup

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (z.B. 1.7.0)'
        required: false

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_FILE: 'Einsatzueberwachung.csproj'
  SOLUTION_DIR: '.'

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Read project version
      id: project_version
      run: |
        $projectFile = Get-Content -Path "${{ env.PROJECT_FILE }}" -Raw
        $version = [regex]::Match($projectFile, '<Version>(.*?)<\/Version>').Groups[1].Value
        echo "version=$version" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish Application
      run: dotnet publish "${{ env.PROJECT_FILE }}" --configuration Release --runtime win-x64 --output "publish/"

    - name: Setup Inno Setup
      run: |
        $innoSetupUrl = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $innoSetupPath = "$env:TEMP\innosetup.exe"
        
        Write-Host "Download Inno Setup..."
        Invoke-WebRequest -Uri $innoSetupUrl -OutFile $innoSetupPath
        
        Write-Host "Install Inno Setup..."
        Start-Process -FilePath $innoSetupPath -ArgumentList "/SILENT", "/SUPPRESSMSGBOXES" -Wait
        
        Write-Host "Inno Setup installiert"
      shell: powershell

    - name: Create Setup Documentation
      run: |
        $version = "${{ steps.project_version.outputs.version }}"
        if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.version }}") {
          $version = "${{ github.event.inputs.version }}"
        }
        
        Write-Host "Erstelle Setup-Dokumentation für Version $version"
        
        # License.txt
        $licenseText = @"
        MIT License
        Copyright (c) 2024 RescueDog_SW
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        "@
        
        # ReadMe.txt
        $readmeText = @"
        Einsatzueberwachung Professional v$version
        =====================================
        WICHTIGE INFORMATIONEN VOR DER INSTALLATION:
        SYSTEM-ANFORDERUNGEN:
        - Windows 10 oder neuer (Windows 11 empfohlen)
        - .NET 8 Runtime (wird automatisch installiert)
        - Mindestens 500 MB freier Speicherplatz
        - Administrator-Rechte für Mobile Server-Funktionalität
        "@
        
        # Installation_Complete.txt
        $installCompleteText = @"
        EINSATZUEBERWACHUNG PROFESSIONAL v$version ERFOLGREICH INSTALLIERT!
        INSTALLATION ABGESCHLOSSEN:
        - Hauptanwendung installiert und konfiguriert
        - Mobile Server automatisch eingerichtet
        - Firewall-Regeln erstellt
        - PowerShell-Scripts installiert
        - Automatische GitHub Updates aktiviert
        - Dokumentation verfügbar
        "@
        
        $licenseText | Out-File -FilePath "License.txt" -Encoding UTF8
        $readmeText | Out-File -FilePath "ReadMe.txt" -Encoding UTF8
        $installCompleteText | Out-File -FilePath "Installation_Complete.txt" -Encoding UTF8
        
        Write-Host "Setup-Dokumentation erstellt"
      shell: powershell

    - name: Create Setup.exe
      run: |
        $innoCompiler = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        
        if (Test-Path $innoCompiler) {
          Write-Host "Kompiliere Setup mit Inno Setup..."
          & $innoCompiler "Setup\Einsatzueberwachung_Setup.iss"
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Setup.exe erfolgreich erstellt"
          } else {
            Write-Host "Setup-Kompilierung fehlgeschlagen (Exit Code: $LASTEXITCODE)"
            exit 1
          }
        } else {
          Write-Host "Inno Setup Compiler nicht gefunden!"
          exit 1
        }
      shell: powershell

    - name: Create update-info.json
      run: |
        $version = "${{ steps.project_version.outputs.version }}"
        if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.version }}") {
          $version = "${{ github.event.inputs.version }}"
          $tagName = "v$version"
        } else {
          $tagName = "${{ github.ref_name }}"
        }
        
        $setupFiles = Get-ChildItem "Setup\Output\*Setup*.exe"
        if ($setupFiles.Count -eq 0) {
          Write-Host "Keine Setup-Datei gefunden!"
          exit 1
        }
        
        $setupFile = $setupFiles[0]
        $fileSize = $setupFile.Length
        $releaseDate = Get-Date -Format "yyyy-MM-dd"
        $fileName = $setupFile.Name
        
        Write-Host "Erstelle update-info.json für Version $version"
        Write-Host "   Setup-Datei: $fileName ($([math]::Round($fileSize/1MB, 2)) MB)"
        
        $updateInfo = @{
            version = $version
            releaseDate = $releaseDate
            downloadUrl = "https://github.com/Elemirus1996/Einsatzueberwachung/releases/download/$tagName/$fileName"
            releaseNotesUrl = "https://github.com/Elemirus1996/Einsatzueberwachung/releases/tag/$tagName"
            mandatory = $false
            minimumVersion = "1.5.0"
            fileSize = $fileSize
            checksum = ""
            releaseNotes = @(
                "Neue Version $version verfügbar",
                "Verbesserte Mobile Server-Funktionalität", 
                "Performance-Optimierungen und Bugfixes",
                "Sicherheits-Updates",
                "Verbesserte GitHub Update-Integration"
            )
        } | ConvertTo-Json -Depth 3
        
        $updateInfo | Out-File -FilePath "update-info.json" -Encoding UTF8
        
        Write-Host "update-info.json erstellt"
      shell: powershell

    - name: Generate Release Notes
      run: |
        $version = "${{ steps.project_version.outputs.version }}"
        if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.version }}") {
          $version = "${{ github.event.inputs.version }}"
        }
        
        $releaseNotes = @"
        # Einsatzueberwachung Professional v$version

        ## Was ist neu?

        ### GitHub Update-System
        - Automatische Update-Prüfung beim App-Start
        - Ein-Klick-Updates direkt aus der Anwendung
        ### Mobile Server Verbesserungen
        - Verbesserte Stabilität bei iPhone-Verbindungen
        - Automatische Firewall-Konfiguration während Installation
        ### Sicherheit & Stabilität
        - Sicherheits-Updates für alle Komponenten
        - Verbesserte Fehlerbehandlung
        "@
        
        $releaseNotes | Out-File -FilePath "RELEASE_NOTES.md" -Encoding UTF8
        
        Write-Host "Release Notes erstellt"
      shell: powershell

    - name: Create Git Tag (fuer workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        $version = "${{ github.event.inputs.version }}"
        if (-not $version) {
          $version = "${{ steps.project_version.outputs.version }}"
        }
        $tagName = "v$version"
        
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        Write-Host "Erstelle Tag: $tagName"
        git tag $tagName
        git push origin $tagName
        
        Write-Host "Tag erstellt und gepusht"
      shell: powershell

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version || steps.project_version.outputs.version) || github.ref_name }}
        name: Einsatzueberwachung Professional ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.version || steps.project_version.outputs.version) || github.ref_name }}
        body_path: RELEASE_NOTES.md
        files: |
          Setup/Output/Einsatzueberwachung_Professional_v*_Setup.exe
          update-info.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release Summary
      run: |
        $version = "${{ steps.project_version.outputs.version }}"
        if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.version }}") {
          $version = "${{ github.event.inputs.version }}"
        }
        
        $setupFiles = Get-ChildItem "Setup\Output\*Setup*.exe"
        $setupFile = $setupFiles[0]
        $fileSize = [math]::Round($setupFile.Length/1MB, 2)
        
        Write-Host ""
        Write-Host "RELEASE ERFOLGREICH ERSTELLT!"
        Write-Host "================================="
        Write-Host ""
        Write-Host "Release-Details:"
        Write-Host "   Version: $version"
        Write-Host "   Setup-Datei: $($setupFile.Name)"
        Write-Host "   Groesse: $fileSize MB"
        Write-Host "   GitHub URL: https://github.com/Elemirus1996/Einsatzueberwachung/releases/tag/v$version"
        Write-Host ""
        Write-Host "Das Release ist jetzt verfuegbar!"
        Write-Host "Benutzer erhalten automatische Update-Benachrichtigungen!"
        Write-Host ""
      shell: powershell
