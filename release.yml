# GitHub Actions Workflow f√ºr automatische Releases
# Erstellt automatisch Setup.exe und ver√∂ffentlicht Updates √ºber GitHub Releases

name: üöÄ Create Release with Setup

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (z.B. 1.6.1)'
        required: true
        default: '1.6.1'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_FILE: 'Einsatz√ºberwachung.csproj'
  SOLUTION_DIR: '.'

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üì¶ Restore Dependencies
      run: dotnet restore "${{ env.PROJECT_FILE }}"

    - name: üî® Build Release
      run: dotnet build "${{ env.PROJECT_FILE }}" --configuration Release --no-restore

    - name: üìã Publish Application
      run: dotnet publish "${{ env.PROJECT_FILE }}" --configuration Release --output "bin/Release/net8.0-windows" --no-build

    - name: üõ†Ô∏è Setup Inno Setup
      run: |
        $innoSetupUrl = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $innoSetupPath = "$env:TEMP\innosetup.exe"
        
        Write-Host "üì• Download Inno Setup..."
        Invoke-WebRequest -Uri $innoSetupUrl -OutFile $innoSetupPath
        
        Write-Host "‚öôÔ∏è Install Inno Setup..."
        Start-Process -FilePath $innoSetupPath -ArgumentList "/SILENT", "/SUPPRESSMSGBOXES" -Wait
        
        Write-Host "‚úÖ Inno Setup installiert"
      shell: powershell

    - name: üìÑ Create Setup Documentation
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        }
        
        Write-Host "üìã Erstelle Setup-Dokumentation f√ºr Version $version"
        
        # License.txt
        $licenseText = @"
        MIT License

        Copyright (c) 2024 RescueDog_SW

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        "@
        
        # ReadMe.txt
        $readmeText = @"
        Einsatz√ºberwachung Professional v$version
        =====================================

        WICHTIGE INFORMATIONEN VOR DER INSTALLATION:

        üìã SYSTEM-ANFORDERUNGEN:
        ‚Ä¢ Windows 10 oder neuer (Windows 11 empfohlen)
        ‚Ä¢ .NET 8 Runtime (wird automatisch installiert)
        ‚Ä¢ Mindestens 500 MB freier Speicherplatz
        ‚Ä¢ Administrator-Rechte f√ºr Mobile Server-Funktionalit√§t

        üîß WAS WIRD INSTALLIERT:
        ‚Ä¢ Einsatz√ºberwachung Professional v$version Hauptanwendung
        ‚Ä¢ .NET 8 Desktop Runtime (falls nicht vorhanden)
        ‚Ä¢ Mobile Server Netzwerk-Konfiguration
        ‚Ä¢ Firewall-Regeln f√ºr iPhone/Android-Zugriff
        ‚Ä¢ PowerShell-Scripts f√ºr Troubleshooting
        ‚Ä¢ Automatische GitHub Update-Pr√ºfung
        ‚Ä¢ Vollst√§ndige Dokumentation und Hilfe-Dateien

        üõ°Ô∏è ADMINISTRATOR-RECHTE:
        F√ºr die vollst√§ndige Mobile Server-Funktionalit√§t werden Administrator-Rechte ben√∂tigt.
        Die Installation konfiguriert automatisch:
        ‚Ä¢ URL-Reservierungen f√ºr Port 8080
        ‚Ä¢ Windows Firewall-Regeln
        ‚Ä¢ PowerShell-Ausf√ºhrungsrichtlinien

        üì± MOBILE SERVER:
        Nach der Installation k√∂nnen Sie sofort den Mobile Server starten und
        iPhones/Android-Ger√§te √ºber WLAN verbinden. QR-Code-Zugriff inklusive!

        üîÑ AUTOMATISCHE UPDATES:
        Diese Version unterst√ºtzt automatische Updates √ºber GitHub Releases.
        Sie werden automatisch √ºber neue Versionen benachrichtigt.

        üí° ERSTE SCHRITTE NACH INSTALLATION:
        1. Anwendung als Administrator starten
        2. Mobile Verbindung √∂ffnen
        3. Server starten
        4. QR-Code mit iPhone scannen

        üÜò SUPPORT:
        Bei Problemen nutzen Sie die installierten Troubleshooting-Tools:
        ‚Ä¢ Mobile Server Reparatur (im Startmen√º)
        ‚Ä¢ System Diagnose (im Startmen√º)
        ‚Ä¢ Vollst√§ndige Dokumentation (im Installationsordner)

        Viel Erfolg mit der Einsatz√ºberwachung Professional v$version!
        "@
        
        # Installation_Complete.txt
        $installCompleteText = @"
        üéâ EINSATZ√úBERWACHUNG PROFESSIONAL v$version ERFOLGREICH INSTALLIERT!

        ‚úÖ INSTALLATION ABGESCHLOSSEN:
        ‚Ä¢ Hauptanwendung installiert und konfiguriert
        ‚Ä¢ Mobile Server automatisch eingerichtet
        ‚Ä¢ Firewall-Regeln erstellt
        ‚Ä¢ PowerShell-Scripts installiert
        ‚Ä¢ Automatische GitHub Updates aktiviert
        ‚Ä¢ Dokumentation verf√ºgbar

        üöÄ N√ÑCHSTE SCHRITTE:

        1Ô∏è‚É£ ERSTE VERWENDUNG:
           ‚Ä¢ Starten Sie "Einsatz√ºberwachung Professional" vom Desktop
           ‚Ä¢ Beim ersten Start als Administrator starten (empfohlen)
           ‚Ä¢ Einsatzdaten eingeben und Teams hinzuf√ºgen

        2Ô∏è‚É£ MOBILE SERVER AKTIVIEREN:
           ‚Ä¢ Men√º ‚Üí Mobile Verbindung
           ‚Ä¢ "Server starten" klicken
           ‚Ä¢ QR-Code mit iPhone/Android scannen
           ‚Ä¢ URL: Wird automatisch angezeigt

        3Ô∏è‚É£ AUTOMATISCHE UPDATES:
           ‚Ä¢ Updates werden automatisch beim Start gepr√ºft
           ‚Ä¢ Sie erhalten Benachrichtigungen √ºber neue Versionen
           ‚Ä¢ Ein-Klick-Update direkt aus der Anwendung

        4Ô∏è‚É£ BEI PROBLEMEN:
           ‚Ä¢ Startmen√º ‚Üí Einsatz√ºberwachung Professional ‚Üí Mobile Server Reparatur
           ‚Ä¢ Oder: Startmen√º ‚Üí Einsatz√ºberwachung Professional ‚Üí System Diagnose
           ‚Ä¢ Dokumentation: [Installationsordner]\Documentation\

        üí° TIPPS:
        ‚Ä¢ F√ºr beste Mobile Server-Performance: Als Administrator starten
        ‚Ä¢ Beide Ger√§te (PC + iPhone) m√ºssen im gleichen WLAN sein
        ‚Ä¢ Bei Firewall-Problemen: Automatische Reparatur verwenden
        ‚Ä¢ Update-Pr√ºfung: Men√º ‚Üí Nach Updates suchen

        üì± MOBILE ACCESS:
        Nach dem Server-Start erhalten Sie eine URL und einen QR-Code.
        Scannen Sie den QR-Code mit der iPhone-Kamera oder geben Sie
        die URL manuell in Safari ein.

        üîÑ GITHUB UPDATES:
        Diese Version erh√§lt automatische Updates √ºber GitHub Releases.
        Keine manuelle Suche nach neuen Versionen mehr erforderlich!

        üéØ Die Anwendung ist jetzt vollst√§ndig einsatzbereit!

        Viel Erfolg bei Ihren Eins√§tzen!
        "@
        
        $licenseText | Out-File -FilePath "License.txt" -Encoding UTF8
        $readmeText | Out-File -FilePath "ReadMe.txt" -Encoding UTF8
        $installCompleteText | Out-File -FilePath "Installation_Complete.txt" -Encoding UTF8
        
        Write-Host "‚úÖ Setup-Dokumentation erstellt"
      shell: powershell

    - name: üì¶ Create Setup.exe
      run: |
        $innoCompiler = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        
        if (Test-Path $innoCompiler) {
          Write-Host "üì¶ Kompiliere Setup mit Inno Setup..."
          & $innoCompiler "Setup\Einsatzueberwachung_Setup.iss"
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Setup.exe erfolgreich erstellt"
          } else {
            Write-Host "‚ùå Setup-Kompilierung fehlgeschlagen (Exit Code: $LASTEXITCODE)"
            exit 1
          }
        } else {
          Write-Host "‚ùå Inno Setup Compiler nicht gefunden!"
          exit 1
        }
      shell: powershell

    - name: üìã Create update-info.json
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
          $tagName = "v$version"
        } else {
          $tagName = "${{ github.ref_name }}"
        }
        
        $setupFiles = Get-ChildItem "Setup\Output\*Setup*.exe"
        if ($setupFiles.Count -eq 0) {
          Write-Host "‚ùå Keine Setup-Datei gefunden!"
          exit 1
        }
        
        $setupFile = $setupFiles[0]
        $fileSize = $setupFile.Length
        $releaseDate = Get-Date -Format "yyyy-MM-dd"
        $fileName = $setupFile.Name
        
        Write-Host "üìã Erstelle update-info.json f√ºr Version $version"
        Write-Host "   Setup-Datei: $fileName ($([math]::Round($fileSize/1MB, 2)) MB)"
        
        $updateInfo = @{
            version = $version
            releaseDate = $releaseDate
            downloadUrl = "https://github.com/Elemirus1996/Einsatzueberwachung/releases/download/$tagName/$fileName"
            releaseNotesUrl = "https://github.com/Elemirus1996/Einsatzueberwachung/releases/tag/$tagName"
            mandatory = $false
            minimumVersion = "1.5.0"
            fileSize = $fileSize
            checksum = ""
            releaseNotes = @(
                "üöÄ Neue Version $version verf√ºgbar",
                "üì± Verbesserte Mobile Server-Funktionalit√§t", 
                "üîß Performance-Optimierungen und Bugfixes",
                "üõ°Ô∏è Sicherheits-Updates",
                "üîÑ Verbesserte GitHub Update-Integration"
            )
        } | ConvertTo-Json -Depth 3
        
        $updateInfo | Out-File -FilePath "update-info.json" -Encoding UTF8
        
        Write-Host "‚úÖ update-info.json erstellt"
      shell: powershell

    - name: üìä Generate Release Notes
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        }
        
        $releaseNotes = @"
        # üöÄ Einsatz√ºberwachung Professional v$version

        ## ‚ú® Was ist neu?

        ### üîÑ GitHub Update-System
        - **Automatische Update-Pr√ºfung** beim App-Start
        - **Ein-Klick-Updates** direkt aus der Anwendung
        - **Rollback-Funktionalit√§t** bei Update-Problemen
        - **Backup-System** f√ºr Konfigurationen

        ### üì± Mobile Server Verbesserungen
        - **Verbesserte Stabilit√§t** bei iPhone-Verbindungen
        - **Automatische Firewall-Konfiguration** w√§hrend Installation
        - **Erweiterte Diagnose-Tools** f√ºr Troubleshooting
        - **Performance-Optimierungen** f√ºr gro√üe Eins√§tze

        ### üõ°Ô∏è Sicherheit & Stabilit√§t
        - **Sicherheits-Updates** f√ºr alle Komponenten
        - **Verbesserte Fehlerbehandlung** 
        - **Erweiterte Logging-Funktionalit√§t**
        - **Performance-Metriken** und Diagnose

        ## üì• Installation

        ### üîß Neue Installation:
        1. **Setup.exe herunterladen** (siehe Assets unten)
        2. **Als Administrator ausf√ºhren**
        3. **Setup-Wizard folgen** (vollautomatisch)
        4. **Mobile Server** funktioniert sofort

        ### üîÑ Update von vorheriger Version:
        - **Automatisches Update** √ºber die Anwendung (empfohlen)
        - **Oder: Setup.exe** mit `/UPDATE` Parameter
        - **Konfiguration** bleibt vollst√§ndig erhalten
        - **Rollback** m√∂glich bei Problemen

        ## üìã System-Anforderungen

        - **Windows 10** oder neuer (Windows 11 empfohlen)
        - **.NET 8 Runtime** (wird automatisch installiert)
        - **500 MB** freier Speicherplatz
        - **Administrator-Rechte** f√ºr Mobile Server-Funktionalit√§t

        ## üì± Mobile Server Features

        - **Automatische Netzwerk-Konfiguration**
        - **QR-Code-Zugriff** f√ºr iPhone/Android
        - **Firewall-Integration** ohne manuelle Konfiguration
        - **Troubleshooting-Tools** integriert

        ## üÜò Support & Hilfe

        ### üìö Dokumentation:
        - **Vollst√§ndige Anleitungen** im Installationsordner
        - **Troubleshooting-Guides** f√ºr h√§ufige Probleme
        - **PowerShell-Scripts** f√ºr automatische Reparatur

        ### üîß Tools:
        - **Mobile Server Reparatur** (Startmen√º)
        - **System Diagnose** (Startmen√º)
        - **Update-Pr√ºfung** (in der Anwendung)

        ## üìä Technische Details

        - **.NET 8** f√ºr maximale Performance
        - **GitHub Releases** f√ºr Updates
        - **Inno Setup** f√ºr professionelle Installation
        - **Automatische Konfiguration** aller Komponenten

        ---

        **üéØ Diese Version bringt die Einsatz√ºberwachung Professional auf ein neues Level mit vollst√§ndig automatisierten Updates und verbesserter Mobile Server-Funktionalit√§t!**

        **üì± Nach der Installation: QR-Code scannen und sofort loslegen!**
        "@
        
        $releaseNotes | Out-File -FilePath "RELEASE_NOTES.md" -Encoding UTF8
        
        Write-Host "‚úÖ Release Notes erstellt"
      shell: powershell

    - name: üè∑Ô∏è Create Git Tag (f√ºr workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        $version = "${{ github.event.inputs.version }}"
        $tagName = "v$version"
        
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        Write-Host "üè∑Ô∏è Erstelle Tag: $tagName"
        git tag $tagName
        git push origin $tagName
        
        Write-Host "‚úÖ Tag erstellt und gepusht"
      shell: powershell

    - name: üì§ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}
        name: üöÄ Einsatz√ºberwachung Professional ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
        body_path: RELEASE_NOTES.md
        files: |
          Setup/Output/Einsatzueberwachung_Professional_v*_Setup.exe
          update-info.json
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: üìä Release Summary
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        }
        
        $setupFiles = Get-ChildItem "Setup\Output\*Setup*.exe"
        $setupFile = $setupFiles[0]
        $fileSize = [math]::Round($setupFile.Length/1MB, 2)
        
        Write-Host ""
        Write-Host "üéâ RELEASE ERFOLGREICH ERSTELLT!" -ForegroundColor Green
        Write-Host "=================================" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìã Release-Details:" -ForegroundColor Cyan
        Write-Host "   Version: $version" -ForegroundColor White
        Write-Host "   Setup-Datei: $($setupFile.Name)" -ForegroundColor White
        Write-Host "   Gr√∂√üe: $fileSize MB" -ForegroundColor White
        Write-Host "   GitHub URL: https://github.com/Elemirus1996/Einsatzueberwachung/releases/tag/v$version" -ForegroundColor White
        Write-Host ""
        Write-Host "üöÄ Das Release ist jetzt verf√ºgbar!" -ForegroundColor Green
        Write-Host "üì± Benutzer erhalten automatische Update-Benachrichtigungen!" -ForegroundColor Green
        Write-Host ""
      shell: powershell
