# üöÄ GitHub Release v1.6.0 - Automatisches Release-Script
# PowerShell Script f√ºr vollst√§ndigen GitHub Release-Prozess

param(
    [switch]$SkipBuild = $false,
    [switch]$DryRun = $false
)

Write-Host "üöÄ EINSATZ√úBERWACHUNG PROFESSIONAL v1.6.0 - GITHUB RELEASE" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host ""

$ErrorActionPreference = "Continue"

try {
    # 1. Git Status pr√ºfen
    Write-Host "üîç Pr√ºfe Git Repository..." -ForegroundColor Yellow
    
    $gitStatus = git status --porcelain 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Git Repository nicht initialisiert oder nicht verf√ºgbar" -ForegroundColor Red
        Write-Host "üí° F√ºhren Sie folgende Befehle manuell aus:" -ForegroundColor Yellow
        Write-Host "   git init" -ForegroundColor White
        Write-Host "   git remote add origin https://github.com/Elemirus1996/Einsatzueberwachung.git" -ForegroundColor White
        Write-Host "   git branch -M master" -ForegroundColor White
        exit 1
    }
    
    Write-Host "‚úÖ Git Repository verf√ºgbar" -ForegroundColor Green
    
    # 2. Build und Setup pr√ºfen
    if (-not $SkipBuild) {
        Write-Host "üî® Pr√ºfe Build und Setup..." -ForegroundColor Yellow
        
        if (-not (Test-Path "bin\Release\net8.0-windows\Einsatzueberwachung.exe")) {
            Write-Host "‚ö†Ô∏è  Build nicht gefunden - erstelle Build..." -ForegroundColor Yellow
            dotnet build "Einsatz√ºberwachung.csproj" --configuration Release
        }
        
        if (-not (Test-Path "Setup\Output\Einsatzueberwachung_Professional_v1.6.0_Setup.exe")) {
            Write-Host "‚ö†Ô∏è  Setup.exe nicht gefunden - erstelle Setup..." -ForegroundColor Yellow
            & "Y:\Inno Setup 6\ISCC.exe" "Setup\Einsatzueberwachung_Setup_Simple.iss"
        }
        
        Write-Host "‚úÖ Build und Setup verf√ºgbar" -ForegroundColor Green
    }
    
    # 3. Setup-Informationen anzeigen
    if (Test-Path "Setup\Output\Einsatzueberwachung_Professional_v1.6.0_Setup.exe") {
        $setupFile = Get-Item "Setup\Output\Einsatzueberwachung_Professional_v1.6.0_Setup.exe"
        $setupSize = [math]::Round($setupFile.Length / 1MB, 2)
        
        Write-Host ""
        Write-Host "üì¶ SETUP-INFORMATIONEN:" -ForegroundColor Cyan
        Write-Host "   Datei: $($setupFile.Name)" -ForegroundColor White
        Write-Host "   Gr√∂√üe: $setupSize MB" -ForegroundColor White
        Write-Host "   Pfad: $($setupFile.FullName)" -ForegroundColor Gray
        Write-Host ""
    }
    
    # 4. Git Commit vorbereiten
    Write-Host "üìù Bereite Git Commit vor..." -ForegroundColor Yellow
    
    if ($DryRun) {
        Write-Host "üîç DRY RUN - Zeige was gemacht w√ºrde:" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "git add ." -ForegroundColor Gray
        Write-Host "git commit -m 'üöÄ Release v1.6.0 - Professional Edition...'" -ForegroundColor Gray
        Write-Host "git tag -a v1.6.0 -m 'üöÄ Einsatz√ºberwachung Professional v1.6.0...'" -ForegroundColor Gray
        Write-Host "git push origin master" -ForegroundColor Gray
        Write-Host "git push --tags" -ForegroundColor Gray
        Write-Host ""
    } else {
        # Alle Dateien hinzuf√ºgen
        Write-Host "   üìÅ F√ºge alle Dateien hinzu..." -ForegroundColor Blue
        git add .
        
        # Commit erstellen
        Write-Host "   üíæ Erstelle Commit..." -ForegroundColor Blue
        $commitMessage = @"
üöÄ Release v1.6.0 - Professional Edition mit GitHub Auto-Updates

‚ú® Neue Features:
- üîÑ Vollst√§ndiges GitHub Auto-Update-System
- üì± Mobile Server mit QR-Code-Zugriff  
- üõ†Ô∏è Professional Setup.exe mit Auto-Konfiguration
- üìä Erweiterte Statistics und Analytics
- üé® Dark/Light Mode und modernisierte UI

üîß Technische Verbesserungen:
- Enterprise-ready Deployment-Optionen
- Automatische Firewall und Netzwerk-Konfiguration
- Umfassende Troubleshooting-Tools
- Performance-Optimierungen

üì± Mobile Integration:
- Progressive Web App (PWA) Support
- Touch-optimierte Bedienung
- Live-Updates alle 10 Sekunden
- Automatische IP-Erkennung

üõ°Ô∏è Enterprise Features:
- Silent Installation f√ºr IT-Administratoren
- Zentrale Update-Verwaltung √ºber GitHub
- Professional Logging und Diagnostics
- Group Policy Integration m√∂glich
"@
        
        git commit -m $commitMessage
        
        # Tag erstellen
        Write-Host "   üè∑Ô∏è Erstelle Git Tag v1.6.0..." -ForegroundColor Blue
        $tagMessage = @"
üöÄ Einsatz√ºberwachung Professional v1.6.0

Major Release mit GitHub Auto-Updates und erweiterter Mobile Integration

Hauptfeatures:
‚Ä¢ GitHub Auto-Update-System f√ºr nahtlose Updates
‚Ä¢ Mobile Server mit QR-Code-Zugriff f√ºr iPhone/Android
‚Ä¢ Professional Setup.exe mit automatischer Konfiguration
‚Ä¢ Erweiterte Statistics und Analytics-Dashboard
‚Ä¢ Dark/Light Mode und modernisierte Benutzeroberfl√§che
‚Ä¢ Enterprise-ready Features f√ºr professionellen Einsatz

Diese Version bringt die Einsatz√ºberwachung auf professionelles Niveau!
"@
        
        git tag -a v1.6.0 -m $tagMessage
        
        # Zu GitHub pushen
        Write-Host "   üåê Pushe zu GitHub..." -ForegroundColor Blue
        git push origin master
        git push --tags
        
        Write-Host "‚úÖ Git Commit und Tag erfolgreich erstellt" -ForegroundColor Green
    }
    
    Write-Host ""
    Write-Host "üéâ GITHUB RELEASE v1.6.0 VORBEREITET!" -ForegroundColor Green
    Write-Host "=======================================" -ForegroundColor Green
    Write-Host ""
    
    if (-not $DryRun) {
        Write-Host "üìã N√ÑCHSTE SCHRITTE:" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "1. üîç GitHub Actions pr√ºfen:" -ForegroundColor Yellow
        Write-Host "   https://github.com/Elemirus1996/Einsatzueberwachung/actions" -ForegroundColor Blue
        Write-Host ""
        Write-Host "2. üì¶ Release wird automatisch erstellt unter:" -ForegroundColor Yellow
        Write-Host "   https://github.com/Elemirus1996/Einsatzueberwachung/releases" -ForegroundColor Blue
        Write-Host ""
        Write-Host "3. ‚è∞ Falls GitHub Actions NICHT automatisch l√§uft:" -ForegroundColor Yellow
        Write-Host "   - Siehe GITHUB_RELEASE_v1.6.0_ANLEITUNG.md" -ForegroundColor White
        Write-Host "   - Manuelles Release √ºber GitHub Web-Interface" -ForegroundColor White
        Write-Host ""
        Write-Host "4. üì± Nach Release-Ver√∂ffentlichung testen:" -ForegroundColor Yellow
        Write-Host "   - Setup.exe Download" -ForegroundColor White
        Write-Host "   - Automatische Update-Benachrichtigung" -ForegroundColor White
        Write-Host "   - Mobile Server mit QR-Code" -ForegroundColor White
        Write-Host ""
        
        $openGitHub = Read-Host "M√∂chten Sie GitHub Actions jetzt √∂ffnen? (j/n)"
        if ($openGitHub -eq 'j' -or $openGitHub -eq 'J') {
            Start-Process "https://github.com/Elemirus1996/Einsatzueberwachung/actions"
        }
        
        $openReleases = Read-Host "M√∂chten Sie GitHub Releases √∂ffnen? (j/n)"
        if ($openReleases -eq 'j' -or $openReleases -eq 'J') {
            Start-Process "https://github.com/Elemirus1996/Einsatzueberwachung/releases"
        }
    }
    
} catch {
    Write-Host ""
    Write-Host "‚ùå FEHLER BEIM RELEASE-PROZESS!" -ForegroundColor Red
    Write-Host "Fehler: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host ""
    Write-Host "üí° L√ñSUNGSVORSCHL√ÑGE:" -ForegroundColor Yellow
    Write-Host "1. Git konfigurieren:" -ForegroundColor White
    Write-Host "   git config user.name 'Ihr Name'" -ForegroundColor Gray
    Write-Host "   git config user.email 'ihre.email@example.com'" -ForegroundColor Gray
    Write-Host ""
    Write-Host "2. Remote Repository pr√ºfen:" -ForegroundColor White
    Write-Host "   git remote -v" -ForegroundColor Gray
    Write-Host ""
    Write-Host "3. Manuelles Release √ºber:" -ForegroundColor White
    Write-Host "   https://github.com/Elemirus1996/Einsatzueberwachung/releases" -ForegroundColor Blue
    Write-Host ""
}

Write-Host "‚úÖ Release-Script abgeschlossen!" -ForegroundColor Green
