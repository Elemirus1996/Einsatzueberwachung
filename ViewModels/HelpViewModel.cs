using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Input;
using Einsatzueberwachung.Services;

namespace Einsatzueberwachung.ViewModels
{
    public class HelpViewModel : BaseViewModel
    {
        private string _currentContent = string.Empty;
        private string _searchText = string.Empty;
        private HelpSection _selectedSection = HelpSection.QuickStart;
        private HelpMenuItem? _selectedMenuItem;

        public ObservableCollection<HelpMenuItem> MenuItems { get; }
        public ObservableCollection<HelpMenuItem> NewFeatureItems { get; }
        public ObservableCollection<HelpMenuItem> StandardFeatureItems { get; }
        public ObservableCollection<HelpMenuItem> SystemFeatureItems { get; }

        public string CurrentContent
        {
            get => _currentContent;
            set
            {
                _currentContent = value;
                OnPropertyChanged();
            }
        }

        public string SearchText
        {
            get => _searchText;
            set
            {
                _searchText = value;
                OnPropertyChanged();
                // Trigger search command when text changes
                ((RelayCommand)SearchCommand).RaiseCanExecuteChanged();
            }
        }

        public HelpSection SelectedSection
        {
            get => _selectedSection;
            set
            {
                _selectedSection = value;
                OnPropertyChanged();
                LoadSectionContent();
            }
        }

        public HelpMenuItem? SelectedMenuItem
        {
            get => _selectedMenuItem;
            set
            {
                _selectedMenuItem = value;
                OnPropertyChanged();
                if (value != null)
                {
                    SelectedSection = value.Section;
                }
            }
        }

        // Enhanced commands with parameter support
        public ICommand SelectSectionCommand { get; private set; } = null!;
        public ICommand SearchCommand { get; private set; } = null!;
        public ICommand ClearSearchCommand { get; private set; } = null!;
        public ICommand NavigateToSectionCommand { get; private set; } = null!;
        public ICommand CopyContentCommand { get; private set; } = null!;
        public ICommand CloseCommand { get; private set; } = null!;

        // Events f√ºr View-Kommunikation
        public event EventHandler? RequestClose;
        public event EventHandler<string>? ShowMessage;

        public HelpViewModel()
        {
            MenuItems = new ObservableCollection<HelpMenuItem>();
            NewFeatureItems = new ObservableCollection<HelpMenuItem>();
            StandardFeatureItems = new ObservableCollection<HelpMenuItem>();
            SystemFeatureItems = new ObservableCollection<HelpMenuItem>();

            InitializeCommands();
            InitializeMenuItems();
            LoadSectionContent(); // Load default content

            LoggingService.Instance?.LogInfo("HelpViewModel initialized with enhanced command support and v1.9.0 Orange design");
        }

        private void InitializeCommands()
        {
            SelectSectionCommand = new RelayCommand<object>(ExecuteSelectSection, CanExecuteSelectSection);
            SearchCommand = new RelayCommand(ExecuteSearch, CanExecuteSearch);
            ClearSearchCommand = new RelayCommand(ExecuteClearSearch, CanExecuteClearSearch);
            NavigateToSectionCommand = new RelayCommand<HelpSection>(ExecuteNavigateToSection);
            CopyContentCommand = new RelayCommand(ExecuteCopyContent, CanExecuteCopyContent);
            CloseCommand = new RelayCommand(ExecuteClose);
        }

        private void InitializeMenuItems()
        {
            // üÜï Neue Features v1.9.0
            NewFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.TeamInputMVVM,
                Icon = "UserPlus", 
                Title = "üß° Team-Input MVVM (NEU)",
                Description = "Vollst√§ndig √ºberarbeitetes Team-Eingabefenster"
            });

            NewFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.OrangeDesign,
                Icon = "Palette", 
                Title = "üß° Orange-Design-System (NEU)",
                Description = "Modernes Orange-Farbschema mit Material Design"
            });

            NewFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.DashboardGuide,
                Icon = "Dashboard", 
                Title = "üìä Dashboard-√úbersicht",
                Description = "Kompakte Team-Cards in responsiver Ansicht"
            });

            NewFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.PdfExportGuide,
                Icon = "FilePdfOutline", 
                Title = "üìÑ Erweiterter PDF-Export",
                Description = "Professionelle Einsatz-Dokumentation"
            });

            NewFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.TeamWarningsGuide,
                Icon = "ExclamationTriangle", 
                Title = "‚ö†Ô∏è Team-Warnschwellen",
                Description = "Individuelle Warnzeiten pro Team"
            });

            NewFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.NotesSystemGuide,
                Icon = "StickyNoteOutline", 
                Title = "üìù Notizen-System",
                Description = "Integriertes Notizen-System im Hauptfenster"
            });

            NewFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.MasterDataGuide,
                Icon = "Database", 
                Title = "üìä Stammdatenverwaltung",
                Description = "Zentrale Personal- und Hunde-Verwaltung"
            });

            // üìö Standard-Features
            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.Shortcuts,
                Icon = "KeyboardOutline", 
                Title = "Tastenk√ºrzel",
                Description = "F1-F10 f√ºr Timer, Strg+Shortcuts"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.TeamManagement,
                Icon = "Users", 
                Title = "Team-Verwaltung",
                Description = "Teams erstellen, bearbeiten und verwalten"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.Timer,
                Icon = "ClockOutline", 
                Title = "Timer-System",
                Description = "Pr√§zise Timer-Steuerung mit Warnungen"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.Statistics,
                Icon = "BarChart", 
                Title = "Statistiken & Analytics",
                Description = "Einsatz-Auswertungen und Performance-Metriken"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.AutoSave,
                Icon = "Save", 
                Title = "Auto-Speichern",
                Description = "Automatische Sicherung aller Daten"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.Themes,
                Icon = "Adjust", 
                Title = "Themes und UI",
                Description = "Dark/Light Mode und Orange-Design"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.Performance,
                Icon = "Tachometer", 
                Title = "Performance",
                Description = "System-Performance und Optimierungen"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.Troubleshooting,
                Icon = "Wrench", 
                Title = "Fehlerbehebung",
                Description = "L√∂sungen f√ºr h√§ufige Probleme"
            });

            StandardFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.FAQ,
                Icon = "QuestionCircleOutline", 
                Title = "H√§ufige Fragen",
                Description = "FAQ zu v1.9.0 Features"
            });

            // üîß System & Updates
            SystemFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.AutoUpdates,
                Icon = "Refresh", 
                Title = "Update-System",
                Description = "Automatische Updates und Versionsverwaltung"
            });

            SystemFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.SetupGuide,
                Icon = "Cog", 
                Title = "Installation & Setup",
                Description = "Erste Schritte und Konfiguration"
            });

            SystemFeatureItems.Add(new HelpMenuItem 
            { 
                Section = HelpSection.MobileEnhanced,
                Icon = "Mobile", 
                Title = "Mobile Funktionen",
                Description = "Smartphone-Integration und Remote-Steuerung"
            });
        }

        // Command implementations with parameter support
        private bool CanExecuteSelectSection(object? parameter)
        {
            return parameter != null;
        }

        private void ExecuteSelectSection(object? parameter)
        {
            try
            {
                if (parameter is HelpSection section)
                {
                    SelectedSection = section;
                    LoggingService.Instance?.LogInfo($"Help section selected: {section}");
                }
                else if (parameter is string sectionName && Enum.TryParse<HelpSection>(sectionName, out var parsedSection))
                {
                    SelectedSection = parsedSection;
                    LoggingService.Instance?.LogInfo($"Help section selected from string: {parsedSection}");
                }
                else if (parameter is HelpMenuItem menuItem)
                {
                    SelectedMenuItem = menuItem;
                    LoggingService.Instance?.LogInfo($"Help menu item selected: {menuItem.Title}");
                }
            }
            catch (Exception ex)
            {
                LoggingService.Instance?.LogError("Error selecting help section", ex);
            }
        }

        private bool CanExecuteSearch()
        {
            return !string.IsNullOrWhiteSpace(SearchText);
        }

        private void ExecuteSearch()
        {
            try
            {
                if (string.IsNullOrWhiteSpace(SearchText))
                {
                    SelectedSection = HelpSection.QuickStart;
                    return;
                }

                CurrentContent = GenerateSearchResults(SearchText);
                LoggingService.Instance?.LogInfo($"Help search executed: {SearchText}");
            }
            catch (Exception ex)
            {
                LoggingService.Instance?.LogError("Error executing search", ex);
                ShowMessage?.Invoke(this, $"Fehler bei der Suche: {ex.Message}");
            }
        }

        private bool CanExecuteClearSearch()
        {
            return !string.IsNullOrWhiteSpace(SearchText);
        }

        private void ExecuteClearSearch()
        {
            try
            {
                SearchText = string.Empty;
                SelectedSection = HelpSection.QuickStart;
                LoggingService.Instance?.LogInfo("Help search cleared");
            }
            catch (Exception ex)
            {
                LoggingService.Instance?.LogError("Error clearing search", ex);
            }
        }

        private void ExecuteNavigateToSection(HelpSection section)
        {
            try
            {
                SelectedSection = section;
                LoggingService.Instance?.LogInfo($"Navigated to help section: {section}");
            }
            catch (Exception ex)
            {
                LoggingService.Instance?.LogError("Error navigating to section", ex);
            }
        }

        private bool CanExecuteCopyContent()
        {
            return !string.IsNullOrWhiteSpace(CurrentContent);
        }

        private void ExecuteCopyContent()
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(CurrentContent))
                {
                    System.Windows.Clipboard.SetText(CurrentContent);
                    ShowMessage?.Invoke(this, "Hilfe-Inhalt in die Zwischenablage kopiert");
                    LoggingService.Instance?.LogInfo("Help content copied to clipboard");
                }
            }
            catch (Exception ex)
            {
                LoggingService.Instance?.LogError("Error copying help content", ex);
                ShowMessage?.Invoke(this, $"Fehler beim Kopieren: {ex.Message}");
            }
        }

        private void ExecuteClose()
        {
            try
            {
                LoggingService.Instance?.LogInfo("Help window closed by user");
                RequestClose?.Invoke(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                LoggingService.Instance?.LogError("Error closing help window", ex);
            }
        }

        private void LoadSectionContent()
        {
            CurrentContent = SelectedSection switch
            {
                HelpSection.QuickStart => GenerateQuickStartContent(),
                HelpSection.TeamInputMVVM => GenerateTeamInputMVVMContent(),
                HelpSection.OrangeDesign => GenerateOrangeDesignContent(),
                HelpSection.DashboardGuide => GenerateDashboardGuideContent(),
                HelpSection.PdfExportGuide => GeneratePdfExportGuideContent(),
                HelpSection.TeamWarningsGuide => GenerateTeamWarningsGuideContent(),
                HelpSection.NotesSystemGuide => GenerateNotesSystemGuideContent(),
                HelpSection.MasterDataGuide => GenerateMasterDataGuideContent(),
                HelpSection.Shortcuts => GenerateShortcutsContent(),
                HelpSection.TeamManagement => GenerateTeamManagementContent(),
                HelpSection.Timer => GenerateTimerContent(),
                HelpSection.Statistics => GenerateStatisticsContent(),
                HelpSection.AutoSave => GenerateAutoSaveContent(),
                HelpSection.Themes => GenerateThemesContent(),
                HelpSection.Performance => GeneratePerformanceContent(),
                HelpSection.Troubleshooting => GenerateTroubleshootingContent(),
                HelpSection.FAQ => GenerateFAQContent(),
                HelpSection.AutoUpdates => GenerateAutoUpdatesContent(),
                HelpSection.SetupGuide => GenerateSetupGuideContent(),
                HelpSection.MobileEnhanced => GenerateMobileEnhancedContent(),
                _ => GenerateQuickStartContent()
            };
        }

        private string GenerateQuickStartContent()
        {
            return @"üöÄ Schnellstart Guide v1.9.0 - Orange Edition

üéØ Einsatz-Workflow v1.9.0 mit Orange-Design & MVVM
1. StartWindow: Einsatzleiter und Ort eingeben (Orange-Design!)
2. Dashboard-√úbersicht: Teams in modernen Orange-Cards verwalten
3. Team-Input MVVM: Stammdaten aus Dropdown w√§hlen oder manuell eingeben
4. Orange-Akzente: Durchg√§ngiges Orange-Farbschema f√ºr bessere Orientierung
5. Individuelle Warnschwellen: Pro Team konfigurierbar
6. Timer-Bedienung: F1-F10 oder Dashboard-Buttons
7. Notizen-System: Direkt im Hauptfenster integriert
8. PDF-Export: Professionelle Berichte mit Orange-Branding

üß° Haupt-Neuerungen in Version 1.9.0
üì± MVVM-Architektur - Vollst√§ndige Trennung von UI und Logik
üß° Orange-Design-System - Modernes, konsistentes Farbschema
üé® Material Design - Elevation-Effekte und Animationen
üîÑ Two-Way-Bindings - Real-time Updates ohne Code-Behind
‚ö° Command-Pattern - Saubere Event-Behandlung mit Parameter-Support
üìä Enhanced Dashboard - Noch bessere Team-√úbersicht
üéØ Improved UX - Optimierte Benutzerf√ºhrung

üêï Team-Erstellung MVVM-Style
Das neue TeamInputWindow nutzt vollst√§ndig MVVM-Pattern:
‚Ä¢ ObservableCollections f√ºr alle Dropdown-Listen
‚Ä¢ Two-Way-Bindings f√ºr Real-time Validation
‚Ä¢ Command-Pattern mit Parameter-Support f√ºr alle Button-Actions
‚Ä¢ Event-Based Communication zwischen View und ViewModel

üìä Orange-Dashboard nutzen
Teams werden in Orange-Cards mit Glow-Effekten dargestellt:
‚Ä¢ Orange-Header mit Primary-Gradient
‚Ä¢ Orange-Akzent-Buttons f√ºr Aktionen
‚Ä¢ Orange-Elevation-Effekte bei Hover
‚Ä¢ Konsistente Orange-Farbharmonie

‚ö†Ô∏è Team-Warnschwellen (Orange-UI)
Neue Orange-Dialoge f√ºr Warnschwellen-Konfiguration mit verbesserter UX.

üìù Notizen-System (Orange-Integration)
Orange-Akzente im integrierten Notizen-Panel mit modernem Design.";
        }

        private string GenerateTeamInputMVVMContent()
        {
            return @"üß° Team-Input MVVM (NEU in v1.9.0)

üèóÔ∏è MVVM-Architektur Features
‚Ä¢ Vollst√§ndige Trennung von UI-Logik (View) und Business-Logik (ViewModel)
‚Ä¢ ObservableCollections f√ºr alle ComboBox-Daten (Hunde, Personal)
‚Ä¢ Two-Way-Bindings mit UpdateSourceTrigger=PropertyChanged f√ºr Real-time Updates
‚Ä¢ Command-Pattern mit Parameter-Support und CanExecute-Validation f√ºr alle Button-Actions
‚Ä¢ Event-Based Communication zwischen View und ViewModel

üß° Orange-Design Features
‚Ä¢ Orange Header-Gradient mit PrimaryGradient-Resource
‚Ä¢ Orange-Cards (OrangeCard-Style) f√ºr alle Info-Panels
‚Ä¢ Orange-Akzent-Button (OrangeAccentButton) f√ºr Team-Erstellung
‚Ä¢ Orange-Glow-Effekte (OrangeElevation2) auf Icons
‚Ä¢ Konsistente Orange-Farbharmonie durch gesamte UI

üìä Enhanced Command Support
‚Ä¢ RelayCommand mit generischen Parameter-Support
‚Ä¢ RelayCommand<T> f√ºr strongly-typed Parameter
‚Ä¢ Automatic CanExecute-Updates bei Property-√Ñnderungen
‚Ä¢ Exception-Handling in Command-Execution
‚Ä¢ Async Command-Support f√ºr Master-Data-Loading

üîÑ Real-time Features
‚Ä¢ Live Team-Name-Preview w√§hrend der Eingabe
‚Ä¢ Sofortige Form-Validation mit IsFormValid-Property
‚Ä¢ Dynamic ComboBox-Population basierend auf Stammdaten
‚Ä¢ Event-gesteuerte Kommunikation zwischen Komponenten

‚ö° Performance-Optimierungen
‚Ä¢ Lazy Loading von Stammdaten
‚Ä¢ Efficient Caching von ComboBox-Items
‚Ä¢ Minimal UI-Updates durch selektive PropertyChanged-Events
‚Ä¢ Memory-optimierte ObservableCollections";
        }

        private string GenerateOrangeDesignContent()
        {
            return @"üß° Orange-Design-System (NEU in v1.9.0)

üé® Farbpalette
‚Ä¢ Primary: #F57C00 (Orange 600) - Hauptfarbe f√ºr alle Akzente
‚Ä¢ Secondary: #FF9800 (Orange 500) - Sekund√§re Elemente
‚Ä¢ Tertiary: #FFB74D (Orange 300) - Helle Akzente
‚Ä¢ Error: #F44336 (Red 500) - Fehler und kritische Warnungen
‚Ä¢ Warning: #FF9800 (Orange 500) - Warnungen in Orange-Harmonie

üåì Dark/Light Mode Integration
‚Ä¢ Automatische Orange-Anpassung f√ºr beide Modi
‚Ä¢ Optimierte Orange-T√∂ne f√ºr Dark Mode (#FFB74D, #FFCC80)
‚Ä¢ Konsistente Kontrast-Verh√§ltnisse f√ºr Accessibility
‚Ä¢ Dynamic Resource-Switching f√ºr Theme-Wechsel

üß° Orange-spezifische Komponenten
‚Ä¢ OrangeCard - Cards mit Orange-Border und Subtle-Background
‚Ä¢ OrangeAccentButton - Orange-Buttons mit White-Text und Shadows
‚Ä¢ OrangeElevation (1-5) - Orange-basierte Schatten-Effekte
‚Ä¢ PrimaryGradient - Orange-Gradienten f√ºr Header-Bereiche

üé≠ Material Design Integration
‚Ä¢ Elevation-System mit Orange-Schatten
‚Ä¢ Ripple-Effekte in Orange-T√∂nen
‚Ä¢ Card-Layouts mit Orange-Akzenten
‚Ä¢ Smooth Transitions zwischen UI-States

‚ú® Animation & Effects
‚Ä¢ Orange Glow-Effekte bei Hover-States
‚Ä¢ Smooth Color-Transitions bei Theme-Wechsel
‚Ä¢ Entrance-Animationen f√ºr neue UI-Elemente
‚Ä¢ Subtle Orange-Highlights f√ºr aktive Elemente

üöÄ Implementierung
Alle UI-Elemente nutzen DynamicResource-Bindings:
‚Ä¢ Automatisches Theme-Switching
‚Ä¢ Konsistente Farbgebung app-weit
‚Ä¢ Einfache Wartung und Erweiterung
‚Ä¢ Performance-optimierte Resource-Lookups";
        }

        private string GenerateDashboardGuideContent()
        {
            return @"üìä Dashboard-√úbersicht mit Orange-Design

üß° Orange-Card-Layout
‚Ä¢ Teams in modernen Orange-Cards dargestellt
‚Ä¢ Orange-Header mit Team-Typ-Badges
‚Ä¢ Orange-Glow-Effekte bei Hover-Interactions
‚Ä¢ Konsistente Orange-Akzente f√ºr Status-Indikatoren

üé® Responsive Design
‚Ä¢ Automatische Anpassung an Bildschirmgr√∂√üe
‚Ä¢ Optimale Darstellung von 1-50 Teams
‚Ä¢ WrapPanel-Layout f√ºr flexible Team-Anordnung
‚Ä¢ Scroll-Optimierung f√ºr gro√üe Team-Mengen

‚ö° Performance-Features
‚Ä¢ Virtualized Scrolling bei vielen Teams
‚Ä¢ Lazy Loading von Team-Details
‚Ä¢ Efficient Memory-Management f√ºr Cards
‚Ä¢ Smooth Animations ohne Performance-Verlust

üîÑ Status-System
‚Ä¢ Gr√ºn: Team bereit (mit Orange-Akzenten)
‚Ä¢ Orange: Team im Einsatz (Primary-Color)
‚Ä¢ Rot: Kritische Warnung (Error-Color)
‚Ä¢ Grau: Team pausiert (Neutral-Colors)

üì± Interactive Elements
‚Ä¢ Direkte Timer-Steuerung auf Cards
‚Ä¢ Quick-Access zu Team-Details
‚Ä¢ Inline-Editing von Team-Informationen
‚Ä¢ Context-Menus f√ºr erweiterte Aktionen";
        }

        private string GeneratePdfExportGuideContent()
        {
            return @"üìÑ PDF-Export mit Orange-Branding

üß° Corporate Design
‚Ä¢ Orange-Header und Akzente in PDF-Layout
‚Ä¢ Professionelles Branding mit Orange-Logo-Bereich
‚Ä¢ Konsistente Farbgebung entsprechend App-Design
‚Ä¢ Print-optimierte Orange-T√∂ne f√ºr bessere Lesbarkeit

üìä Export-Optionen
‚Ä¢ Vollbericht: Alle Teams, Zeiten und Notizen
‚Ä¢ Kurzbericht: Zusammenfassung mit Kennzahlen
‚Ä¢ Statistik-Report: Grafiken und Auswertungen
‚Ä¢ Timeline-Export: Chronologischer Ereignis-Verlauf

‚ö° Performance-Optimierungen
‚Ä¢ Streaming-Export f√ºr gro√üe Datenmengen
‚Ä¢ Parallel Processing f√ºr schnelle Generierung
‚Ä¢ Memory-effiziente PDF-Erstellung
‚Ä¢ Progress-Feedback w√§hrend Export-Prozess

üéØ Professionelle Features
‚Ä¢ Automatische Seitennummerierung
‚Ä¢ Inhaltsverzeichnis mit Hyperlinks
‚Ä¢ Watermark-Option f√ºr Entw√ºrfe
‚Ä¢ Digitale Signatur-Unterst√ºtzung

üìã Template-System
‚Ä¢ Vordefinierte Orange-Templates
‚Ä¢ Anpassbare Header und Footer
‚Ä¢ Flexible Spalten-Layouts
‚Ä¢ Logo-Integration f√ºr Organisationen";
        }

        private string GenerateTeamWarningsGuideContent()
        {
            return @"‚ö†Ô∏è Team-Warnschwellen mit Orange-UI

üß° Orange-Dialog-Design
‚Ä¢ Moderne Orange-Dialoge f√ºr Warnschwellen-Konfiguration
‚Ä¢ Orange-Slider f√ºr intuitive Zeit-Einstellung
‚Ä¢ Orange-Akzent-Buttons f√ºr Speichern/Abbrechen
‚Ä¢ Live-Preview der Warnzeiten mit Orange-Indikatoren

‚è±Ô∏è Individuelle Konfiguration
‚Ä¢ Pro Team eigene Erste und Zweite Warnung
‚Ä¢ Eingabe in Minuten mit Slider oder Textfeld
‚Ä¢ Sofortige Validierung der eingegebenen Werte
‚Ä¢ Backup zu globalen Einstellungen wenn nicht konfiguriert

üé® Visuelle Indikatoren
‚Ä¢ Orange-Warning-States f√ºr erste Warnung
‚Ä¢ Red-Critical-States f√ºr zweite Warnung
‚Ä¢ Smooth Color-Transitions zwischen Zust√§nden
‚Ä¢ Orange-Glow-Effekte bei aktiven Warnungen

‚ö° Sofortige Anwendung
‚Ä¢ √Ñnderungen werden live √ºbernommen
‚Ä¢ Automatische Speicherung in Team-Profil
‚Ä¢ Keine Neustart erforderlich
‚Ä¢ Integration in Auto-Save-System

üìä Team-spezifische Optimierung
‚Ä¢ Verschiedene Hundeteam-Typen ber√ºcksichtigen
‚Ä¢ Erfahrungsbasierte Warnzeit-Empfehlungen
‚Ä¢ Historische Daten f√ºr Optimierungs-Vorschl√§ge
‚Ä¢ Flexible Anpassung je nach Einsatzart";
        }

        private string GenerateNotesSystemGuideContent()
        {
            return @"üìù Notizen-System mit Orange-Integration

üß° Orange-UI-Integration
‚Ä¢ Orange-Akzente im Notizen-Panel
‚Ä¢ Orange-Highlight f√ºr neue Notizen
‚Ä¢ Orange-Icons f√ºr verschiedene Notiz-Typen
‚Ä¢ Konsistente Orange-Farbgebung im gesamten System

‚ö° Hauptfenster-Integration
‚Ä¢ Direkte Eingabe ohne separate Fenster
‚Ä¢ Enter-Taste f√ºr schnelle Notiz-Erstellung
‚Ä¢ Auto-Scroll zu neuesten Eintr√§gen
‚Ä¢ Real-time Updates ohne Manual Refresh

üè∑Ô∏è Kategorisierung-System
‚Ä¢ Automatische Typ-Erkennung (System, Benutzer, Warnungen)
‚Ä¢ Farbkodierte Kategorien mit Orange-Harmonie
‚Ä¢ Filterung nach Notiz-Typen
‚Ä¢ Team-spezifische Zuordnung

üìä Export & Integration
‚Ä¢ Vollst√§ndige PDF-Integration mit Orange-Layout
‚Ä¢ JSON-Export f√ºr externe Systeme
‚Ä¢ Chronologische Timeline-Darstellung
‚Ä¢ Suchfunktion √ºber alle Notizen

üîç Erweiterte Features
‚Ä¢ Unlimited Notiz-Speicher
‚Ä¢ Automatische Zeitstempel
‚Ä¢ Team-Zuordnung √ºber Dropdown
‚Ä¢ Quick-Access √ºber Tastenk√ºrzel";
        }

        private string GenerateMasterDataGuideContent()
        {
            return @"üìä Stammdatenverwaltung mit Orange-Design

üß° Orange-Management-UI
‚Ä¢ Moderne Orange-Tabs f√ºr Personal/Hunde-Verwaltung
‚Ä¢ Orange-Cards f√ºr Individual-Eintr√§ge
‚Ä¢ Orange-Add-Buttons f√ºr neue Datens√§tze
‚Ä¢ Konsistente Orange-Akzente durch gesamte Verwaltung

üë• Personal-Management
‚Ä¢ Vollst√§ndige Personal-Erfassung mit Orange-Forms
‚Ä¢ Mehrfach-F√§higkeiten: HF, H, FA, GF, ZF, VF, DP
‚Ä¢ Aktiv/Inaktiv-Status mit Orange-Toggle-Switches
‚Ä¢ Notiz-Feld f√ºr zus√§tzliche Informationen

üêï Hunde-Management
‚Ä¢ Comprehensive Hunde-Profile mit Orange-Styling
‚Ä¢ Mehrfach-Spezialisierungen: FL, TR, MT, WO, LA, GE, LS
‚Ä¢ Zuordnung zu Hundef√ºhrern √ºber Dropdown
‚Ä¢ Rasse, Alter und Notizen-Erfassung

üîÑ Team-Integration
‚Ä¢ Seamless Integration in TeamInputWindow MVVM
‚Ä¢ Auto-Population von ComboBox-Listen
‚Ä¢ Auto-Fill bei Hund-Auswahl (Hundef√ºhrer)
‚Ä¢ Fallback zu manueller Eingabe

üíæ Speicher & Backup
‚Ä¢ Local JSON-Storage in %LocalAppData%
‚Ä¢ Automatisches Backup bei √Ñnderungen
‚Ä¢ Import/Export f√ºr Daten-Migration
‚Ä¢ Versionierung f√ºr Wiederherstellung";
        }

        private string GenerateShortcutsContent()
        {
            return @"‚å®Ô∏è Tastenk√ºrzel-Referenz v1.9.0

üß° Orange-UI Shortcuts
Strg + O: Orange-Theme-Optionen √∂ffnen
Strg + Shift + O: Orange-Design-Einstellungen

üïê Timer-Steuerung
F1: Team 1 Timer start/stop
F2: Team 2 Timer start/stop
F3: Team 3 Timer start/stop
F4: Team 4 Timer start/stop
F5: Team 5 Timer start/stop
F6: Team 6 Timer start/stop
F7: Team 7 Timer start/stop
F8: Team 8 Timer start/stop
F9: Team 9 Timer start/stop
F10: Team 10 Timer start/stop

üéõÔ∏è Allgemeine Steuerung
F11: Vollbild ein/ausschalten
Esc: Vollbild beenden oder App schlie√üen
Strg + N: Neues Team hinzuf√ºgen (MVVM-Dialog)
Strg + E: Einsatz exportieren (mit Orange-PDF)
Strg + T: Theme umschalten (Orange-Integration)
Strg + H: Hilfe anzeigen (dieses Fenster)
Strg + M: Stammdaten-Verwaltung √∂ffnen

üìù Eingabe & Navigation
Enter: Schnellnotiz hinzuf√ºgen (im Notiz-Feld)
Tab: Zwischen Eingabefeldern wechseln
Strg + A: Alles markieren (in Textfeldern)
Strg + F: Suche in Notizen
Strg + Shift + N: Erweiterte Notiz-Eingabe

üí° Tipp: Alle Shortcuts sind Orange-Theme-aware und funktionieren in allen Modi!";
        }

        // Placeholder methods for other content sections
        private string GenerateTimerContent() => GenerateContentForSection("Timer-System", "Pr√§zise Timer mit Orange-Status-Indikatoren und MVVM-Bindings.");
        private string GenerateTeamManagementContent() => GenerateContentForSection("Team-Management", "Team-Verwaltung mit Orange-Cards und MVVM-Integration.");
        private string GenerateStatisticsContent() => GenerateContentForSection("Statistiken & Analytics", "Einsatz-Auswertungen mit Orange-Charts und erweiterten Metriken.");
        private string GenerateAutoSaveContent() => GenerateContentForSection("Auto-Speichern", "Automatische Sicherung mit Orange-Status-Feedback.");
        private string GenerateThemesContent() => GenerateContentForSection("Themes & UI", "Orange-Design-System mit Dark/Light Mode Integration.");
        private string GeneratePerformanceContent() => GenerateContentForSection("Performance", "Optimierte Performance f√ºr Orange-UI und MVVM-Pattern.");
        private string GenerateTroubleshootingContent() => GenerateContentForSection("Fehlerbehebung", "L√∂sungen f√ºr Orange-Design und MVVM-spezifische Probleme.");
        private string GenerateFAQContent() => GenerateContentForSection("H√§ufige Fragen", "FAQ zu v1.9.0 mit Orange-Design und MVVM-Features.");
        private string GenerateAutoUpdatesContent() => GenerateContentForSection("Update-System", "Automatische Updates mit Orange-Progress-Indikatoren.");
        private string GenerateSetupGuideContent() => GenerateContentForSection("Installation & Setup", "Setup-Guide f√ºr v1.9.0 mit Orange-Design-Konfiguration.");
        private string GenerateMobileEnhancedContent() => GenerateContentForSection("Mobile Funktionen", "Mobile Features mit Orange-Branding und responsive Design.");

        private string GenerateSearchResults(string searchTerm)
        {
            return $@"üîç Suchergebnisse f√ºr '{searchTerm}'

Die Suchfunktion wird in einer zuk√ºnftigen Version implementiert.
Verwenden Sie die Orange-Navigation links, um Hilfe-Themen zu durchsuchen.

üß° Neu in v1.9.0:
‚Ä¢ Vollst√§ndige MVVM-Architektur mit Command-Parameter-Support
‚Ä¢ Orange-Design-System
‚Ä¢ Erweiterte Team-Input-Funktionen
‚Ä¢ Verbesserte Performance und UX";
        }

        private string GenerateContentForSection(string title, string description)
        {
            return $@"{title}

{description}

Diese Sektion wird in einer zuk√ºnftigen Version erweitert.
Verwenden Sie die Orange-Navigation f√ºr andere Hilfe-Themen.

üß° v1.9.0 Features verf√ºgbar in dieser Sektion:
‚Ä¢ Orange-Design-Integration
‚Ä¢ MVVM-Pattern-Unterst√ºtzung mit Command-Parameter-Support
‚Ä¢ Verbesserte Performance
‚Ä¢ Enhanced User Experience";
        }
    }

    public enum HelpSection
    {
        QuickStart,
        TeamInputMVVM,
        OrangeDesign,
        DashboardGuide,
        PdfExportGuide,
        TeamWarningsGuide,
        NotesSystemGuide,
        MasterDataGuide,
        Shortcuts,
        TeamManagement,
        Timer,
        Statistics,
        AutoSave,
        Themes,
        Performance,
        Troubleshooting,
        FAQ,
        AutoUpdates,
        SetupGuide,
        MobileEnhanced
    }

    public class HelpMenuItem : BaseViewModel
    {
        public HelpSection Section { get; set; }
        public string Icon { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}
